/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/userinfo': {
    /** get user info */
    get: operations['getUserInfo']
  }
  '/groups/{id}/gcp_projects': {
    /** Query and return all GCP projects for the group */
    get: operations['getGCPProjects']
    parameters: {
      path: {
        /** Group ID */
        id: string
      }
    }
  }
  '/gcp/{id}/tables': {
    /** Return all BigQuery tables in gcp project */
    get: operations['getBigqueryTables']
    parameters: {
      path: {
        /** GCP project ID */
        id: string
      }
    }
  }
  '/gcp/{id}/datasets': {
    /** Return all BigQuery datasets in gcp project */
    get: operations['getBigqueryDatasets']
    parameters: {
      path: {
        /** GCP project ID */
        id: string
      }
    }
  }
  '/gcp/{projectId}/datasets/{datasetId}': {
    /** Return all BigQuery tables and views in dataset in gcp project */
    get: operations['getBigqueryDataset']
    parameters: {
      path: {
        /** GCP project ID */
        projectId: string
        /** BigQuery Dataset ID */
        datasetId: string
      }
    }
  }
  '/collections': {
    /** List all Collections */
    get: operations['getCollections']
    /** Create a new Collection */
    post: operations['createCollection']
  }
  '/collections/{id}': {
    /** List a Collection of data types */
    get: operations['getCollection']
    /** Update a Collection */
    put: operations['updateCollection']
    /** Delete a Collection */
    delete: operations['deleteCollection']
  }
  '/collections/{id}/add': {
    /** Add to collection */
    post: operations['addToCollection']
  }
  '/dataproducts': {
    /** Get dataproducts */
    get: operations['getDataproducts']
    /** Create a new dataproduct */
    post: operations['createDataproduct']
  }
  '/dataproducts/{id}': {
    /** Get dataproduct */
    get: operations['getDataproduct']
    /** Update a dataproduct */
    put: operations['updateDataproduct']
    /** Delete a dataproduct */
    delete: operations['deleteDataproduct']
  }
  '/dataproducts/{id}/metadata': {
    /** Get dataproduct metadata */
    get: operations['getDataproductMetadata']
  }
  '/search': {
    /** Search in NADA */
    get: operations['search']
    parameters: {
      query: {
        q?: string
        limit?: number
        offset?: number
      }
    }
  }
}

export interface components {
  schemas: {
    Collection: {
      id: string
      name: string
      description?: string
      slug: string
      repo?: string
      last_modified: string
      created: string
      owner: components['schemas']['Owner']
      keywords?: string[]
      elements: components['schemas']['CollectionElement'][]
    }
    NewCollection: {
      name: string
      description?: string
      slug?: string
      repo?: string
      owner: components['schemas']['Owner']
      keywords?: string[]
    }
    UpdateCollection: {
      name: string
      description?: string
      slug?: string
      repo?: string
      keywords?: string[]
    }
    Dataproduct: {
      id: string
      name: string
      description?: string
      slug?: string
      repo?: string
      pii: boolean
      keywords: string[]
      owner: components['schemas']['Owner']
      type: components['schemas']['DataproductType']
      datasource: components['schemas']['Datasource']
    }
    Datasource: components['schemas']['Bigquery']
    NewDataproduct: {
      name: string
      description?: string
      slug?: string
      repo?: string
      pii: boolean
      keywords?: string[]
      owner: components['schemas']['Owner']
      datasource: components['schemas']['Datasource']
    }
    UpdateDataproduct: {
      name: string
      description?: string
      slug?: string
      repo?: string
      pii: boolean
      keywords?: string[]
    }
    DataproductSummary: {
      id: string
      name: string
      type: components['schemas']['DataproductType']
    }
    DataproductType: 'bigquery'
    Owner: {
      group: string
      teamkatalogen?: string
    }
    Bigquery: {
      project_id: string
      dataset: string
      table: string
    }
    BigqueryType: 'table' | 'view'
    BigqueryTypeMetadata: {
      name: string
      type: components['schemas']['BigqueryType']
      description: string
      last_modified: string
    }
    UserInfo: {
      name: string
      email: string
      groups: components['schemas']['Group'][]
    }
    TableColumn: {
      name: string
      type: string
      mode: string
      description: string
    }
    DataproductMetadata: {
      dataproduct_id: string
      schema: components['schemas']['TableColumn'][]
    }
    SearchResultEntry: {
      url: string
      type: components['schemas']['SearchResultType']
      id: string
      name: string
      excerpt: string
    }
    SearchResultType: 'dataproduct' | 'collection' | 'datapackage'
    Group: {
      /** Email and ID of the group */
      email: string
      name: string
    }
    CollectionElementType: 'dataproduct'
    CollectionElement: {
      element_type: components['schemas']['CollectionElementType']
      element_id: string
    }
  }
}

export interface operations {
  /** get user info */
  getUserInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserInfo']
        }
      }
    }
  }
  /** Query and return all GCP projects for the group */
  getGCPProjects: {
    parameters: {
      path: {
        /** Group ID */
        id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /** Return all BigQuery tables in gcp project */
  getBigqueryTables: {
    parameters: {
      path: {
        /** GCP project ID */
        id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Bigquery'][]
        }
      }
    }
  }
  /** Return all BigQuery datasets in gcp project */
  getBigqueryDatasets: {
    parameters: {
      path: {
        /** GCP project ID */
        id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /** Return all BigQuery tables and views in dataset in gcp project */
  getBigqueryDataset: {
    parameters: {
      path: {
        /** GCP project ID */
        projectId: string
        /** BigQuery Dataset ID */
        datasetId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BigqueryTypeMetadata'][]
        }
      }
    }
  }
  /** List all Collections */
  getCollections: {
    parameters: {
      query: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Collection'][]
        }
      }
    }
  }
  /** Create a new Collection */
  createCollection: {
    responses: {
      /** Created successfully */
      201: {
        content: {
          'application/json': components['schemas']['Collection']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewCollection']
      }
    }
  }
  /** List a Collection of data types */
  getCollection: {
    parameters: {
      path: {
        /** Collection ID */
        id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Collection'][]
        }
      }
    }
  }
  /** Update a Collection */
  updateCollection: {
    parameters: {
      path: {
        /** Collection ID */
        id: string
      }
    }
    responses: {
      /** Updated OK */
      200: {
        content: {
          'application/json': components['schemas']['Collection']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCollection']
      }
    }
  }
  /** Delete a Collection */
  deleteCollection: {
    parameters: {
      path: {
        /** Collection ID */
        id: string
      }
    }
    responses: {
      /** Deleted OK */
      204: never
    }
  }
  /** Add to collection */
  addToCollection: {
    parameters: {
      path: {
        /** Collection ID */
        id: string
      }
    }
    responses: {
      /** Added OK */
      200: {
        content: {
          'application/json': components['schemas']['CollectionElement']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CollectionElement']
      }
    }
  }
  /** Get dataproducts */
  getDataproducts: {
    parameters: {
      query: {
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Dataproduct'][]
        }
      }
    }
  }
  /** Create a new dataproduct */
  createDataproduct: {
    responses: {
      /** Created successfully */
      201: {
        content: {
          'application/json': components['schemas']['Dataproduct']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewDataproduct']
      }
    }
  }
  /** Get dataproduct */
  getDataproduct: {
    parameters: {
      path: {
        /** Dataproduct ID */
        id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Dataproduct']
        }
      }
    }
  }
  /** Update a dataproduct */
  updateDataproduct: {
    parameters: {
      path: {
        /** Dataproduct ID */
        id: string
      }
    }
    responses: {
      /** Updated OK */
      200: {
        content: {
          'application/json': components['schemas']['Dataproduct']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDataproduct']
      }
    }
  }
  /** Delete a dataproduct */
  deleteDataproduct: {
    parameters: {
      path: {
        /** Dataproduct ID */
        id: string
      }
    }
    responses: {
      /** Deleted OK */
      204: never
    }
  }
  /** Get dataproduct metadata */
  getDataproductMetadata: {
    parameters: {
      path: {
        /** Dataproduct ID */
        id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['DataproductMetadata']
        }
      }
    }
  }
  /** Search in NADA */
  search: {
    parameters: {
      query: {
        q?: string
        limit?: number
        offset?: number
      }
    }
    responses: {
      /** Search result */
      200: {
        content: {
          'application/json': components['schemas']['SearchResultEntry'][]
        }
      }
    }
  }
}

export interface external {}
